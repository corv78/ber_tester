#-----------------------------------------------------------
# Vivado v2016.2 (64-bit)
# SW Build 1577090 on Thu Jun  2 16:32:40 MDT 2016
# IP Build 1577682 on Fri Jun  3 12:00:54 MDT 2016
# Start of session at: Wed May 30 15:40:40 2018
# Process ID: 16740
# Current directory: C:/RTL/GET/ber_tester
# Command line: vivado.exe -mode batch -source build.tcl
# Log file: C:/RTL/GET/ber_tester/vivado.log
# Journal file: C:/RTL/GET/ber_tester\vivado.jou
#-----------------------------------------------------------
source build.tcl
# set origin_dir "."
# if { [info exists ::origin_dir_loc] } {
#   set origin_dir $::origin_dir_loc
# }
# variable script_file
# set script_file "ber_tester.tcl"
# proc help {} {
#   variable script_file
#   puts "\nDescription:"
#   puts "Recreate a Vivado project from this script. The created project will be"
#   puts "functionally equivalent to the original project for which this script was"
#   puts "generated. The script contains commands for creating a project, filesets,"
#   puts "runs, adding/importing sources and setting properties on various objects.\n"
#   puts "Syntax:"
#   puts "$script_file"
#   puts "$script_file -tclargs \[--origin_dir <path>\]"
#   puts "$script_file -tclargs \[--help\]\n"
#   puts "Usage:"
#   puts "Name                   Description"
#   puts "-------------------------------------------------------------------------"
#   puts "\[--origin_dir <path>\]  Determine source file paths wrt this path. Default"
#   puts "                       origin_dir path value is \".\", otherwise, the value"
#   puts "                       that was set with the \"-paths_relative_to\" switch"
#   puts "                       when this script was generated.\n"
#   puts "\[--help\]               Print help information for this script"
#   puts "-------------------------------------------------------------------------\n"
#   exit 0
# }
# if { $::argc > 0 } {
#   for {set i 0} {$i < [llength $::argc]} {incr i} {
#     set option [string trim [lindex $::argv $i]]
#     switch -regexp -- $option {
#       "--origin_dir" { incr i; set origin_dir [lindex $::argv $i] }
#       "--help"       { help }
#       default {
#         if { [regexp {^-} $option] } {
#           puts "ERROR: Unknown option '$option' specified, please type '$script_file -tclargs --help' for usage info.\n"
#           return 1
#         }
#       }
#     }
#   }
# }
# set orig_proj_dir "[file normalize "$origin_dir/"]"
# create_project ber_tester ./ber_tester -part xc7z030ffg676-2
# set proj_dir [get_property directory [current_project]]
# set obj [get_projects ber_tester]
# set_property "default_lib" "xil_defaultlib" $obj
# set_property "generate_ip_upgrade_log" "0" $obj
# set_property "part" "xc7z030ffg676-2" $obj
# set_property "sim.ip.auto_export_scripts" "1" $obj
# set_property "simulator_language" "Mixed" $obj
# if {[string equal [get_filesets -quiet sources_1] ""]} {
#   create_fileset -srcset sources_1
# }
# set obj [get_filesets sources_1]
# set files [list \
#  "[file normalize "$origin_dir/src/prbs_gen.v"]"\
#  "[file normalize "$origin_dir/src/prbs_checker.v"]"\
# ]
# add_files -norecurse -fileset $obj $files
# set obj [get_filesets sources_1]
# set_property "top" "prbs_gen" $obj
# if {[string equal [get_filesets -quiet constrs_1] ""]} {
#   create_fileset -constrset constrs_1
# }
# set obj [get_filesets constrs_1]
# set obj [get_filesets constrs_1]
# if {[string equal [get_filesets -quiet sim_1] ""]} {
#   create_fileset -simset sim_1
# }
# set obj [get_filesets sim_1]
# set files [list \
#  "[file normalize "$origin_dir/sim/ber_tester_tb.sv"]"\
# ]
# add_files -norecurse -fileset $obj $files
# set file "$origin_dir/sim/ber_tester_tb.sv"
# set file [file normalize $file]
# set file_obj [get_files -of_objects [get_filesets sim_1] [list "*$file"]]
# set_property "file_type" "SystemVerilog" $file_obj
# set obj [get_filesets sim_1]
# set_property "top" "prbs_gen" $obj
# set_property "transport_int_delay" "0" $obj
# set_property "transport_path_delay" "0" $obj
# set_property "xelab.nosort" "1" $obj
# set_property "xelab.unifast" "" $obj
# if {[string equal [get_runs -quiet synth_1] ""]} {
#   create_run -name synth_1 -part xc7z030ffg676-2 -flow {Vivado Synthesis 2016} -strategy "Vivado Synthesis Defaults" -constrset constrs_1
# } else {
#   set_property strategy "Vivado Synthesis Defaults" [get_runs synth_1]
#   set_property flow "Vivado Synthesis 2016" [get_runs synth_1]
# }
# set obj [get_runs synth_1]
# set_property "part" "xc7z030ffg676-2" $obj
# current_run -synthesis [get_runs synth_1]
# if {[string equal [get_runs -quiet impl_1] ""]} {
#   create_run -name impl_1 -part xc7z030ffg676-2 -flow {Vivado Implementation 2016} -strategy "Vivado Implementation Defaults" -constrset constrs_1 -parent_run synth_1
# } else {
#   set_property strategy "Vivado Implementation Defaults" [get_runs impl_1]
#   set_property flow "Vivado Implementation 2016" [get_runs impl_1]
# }
# set obj [get_runs impl_1]
# set_property "part" "xc7z030ffg676-2" $obj
# set_property "steps.write_bitstream.args.readback_file" "0" $obj
# set_property "steps.write_bitstream.args.verbose" "0" $obj
# current_run -implementation [get_runs impl_1]
# puts "INFO: Project created:ber_tester"
INFO: Project created:ber_tester
INFO: [Common 17-206] Exiting Vivado at Wed May 30 15:40:46 2018...
